/// Collection of helper functions to control staging of a vessel

use { Vessel } from ksp::vessel
use { wait_until, sleep } from ksp::game
use { CONSOLE } from ksp::console

/// Helper function to automatically trigger staging during a burn.
///
/// This function is just checking if one of the ignited engines has has a flameout,
/// which in most cases means that the current stage has burned out.
///
/// Will return `true` if stating has been triggered.
pub fn trigger_staging(vessel : Vessel) -> bool = {
    if(vessel.staging.current == 0) return false

    let needs_staging = has_flameout(vessel)
    if(needs_staging) {
        const stage = vessel.staging.current
        // Only some engines had a flameout
        const is_partial_flameout = has_still_running(vessel)
        // The next stage does not trigger any engines
        const next_has_engine = if(stage > 0) has_engine_in_stage(vessel, stage - 1) else false
        CONSOLE.print_line("Trigger next stage")
        wait_until(fn() -> vessel.staging.ready)
        vessel.staging.next()

        if(stage > 0 && !is_partial_flameout && !next_has_engine) {
            CONSOLE.print_line("No engine staged, trigger next")
            wait_until(fn() -> vessel.staging.ready)

            vessel.staging.next()
        }
    }

    needs_staging
}

pub sync fn has_flameout(vessel : Vessel) -> bool = {
    for(engine in vessel.engines)
        if(engine.has_ignited && engine.is_flameout)
            return true
    false
}

pub sync fn has_still_running(vessel : Vessel) -> bool = {
    for(engine in vessel.engines)
        if(engine.has_ignited && !engine.is_flameout)
            return true
    false
}

pub sync fn has_ignited(vessel : Vessel) -> bool = {
    for(engine in vessel.engines)
        if(engine.has_ignited)
            return true
    false
}

pub sync fn has_engine_in_stage(vessel : Vessel, stage: int) -> bool = {
    for(part in vessel.staging.parts_in_stage(stage)) {
        if(part.is_engine)
            return true
    }
    false
}